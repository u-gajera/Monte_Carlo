function [Ms, Cs, Mx, Es] = ising3d(model,Lat,J1,J2,J3,Sp,L,estep,mstep,Ts,para,kb)
%global model Lat J1 J2 J3 Sp L estep mstep Ts para kb

Ms = zeros(1, size(Ts,2));
Mx = zeros(1, size(Ts,2));
Es = zeros(1, size(Ts,2));
Cs = zeros(1, size(Ts,2));
const = [];

%% Generate a random initial configuration of spin Sp
initiate = Sp .* ((rand(L,L,L) > 0.5)*2 - 1);
grid = zeros(L,L,L);                           % move into parfor if parellel
grid(:,:,:) = initiate(:,:,:) ;  %deep copy?   % move into parfor if parellel   

%%% Generate zero and ones matri
%azero = zeros(L);
%aones = zeros(L);
%for i = 1:L
%    for j = 1:L
%        if mod(i-j,2)==1
%        azero(i,j)=1;
%        aones(i,j)=0;
%        else
%        azero(i,j)=0;
%        aones(i,j)=1;
%        end
%    end
%end

bar = waitbar(0,'1','Name','Monte-Carlo');
%% Evolve the system for a fixed number of steps
for t = 1:size(Ts,2)   %change into parfor if parellel
    E0 = 0.0; E1 = 0.0; E2 = 0.0; M0 = 0.0; M1 = 0.0; M2 = 0.0;
    const = 1 / (L^3 * Ts(t) * kb) ;  % factor to be used in specific heat
    %grid = zeros(L);                           % move into parfor if parellel
    %grid(:,:) = initiate(:,:) ;  % deep copy?  % move into parfor if parellel
    str=['Calculating: ',num2str(Ts(t)),'K', ...
         ' (',num2str(100*t/size(Ts,2)),'%)'];
    waitbar(t/size(Ts,2),bar,str)
    
    for i=1:(estep+mstep)
    % Pick a random spin
    row = randi(L); col = randi(L); pil = randi(L);
    % Find its Fir/Sec/Thi-Nearest neighbors,
    % Calculate the number of neighbors of each cell
    gridT = - grid(row,col,pil);
    % Calculate the change in energy of flipping a spin
    neighbors1=[]; neighbors2=[]; neighbors3=[];
    above1 = mod(row - 1 - 1, size(grid,1)) + 1;
    below1 = mod(row + 1 - 1, size(grid,1)) + 1;
    left1  = mod(col - 1 - 1, size(grid,2)) + 1;
    right1 = mod(col + 1 - 1, size(grid,2)) + 1;
    top1   = mod(pil - 1 - 1, size(grid,3)) + 1;
    bot1   = mod(pil + 1 - 1, size(grid,3)) + 1;
    
    if Lat == 'c'
        neighbors1 = grid(above1,    col,  pil) + ...
                     grid(below1,    col,  pil) + ...
                     grid(   row,  left1,  pil) + ...
                     grid(   row, right1,  pil) + ...
                     grid(   row,    col, top1) + ...
                     grid(   row,    col, bot1) ;
        neighbors2 = grid(above1,  left1,  pil) + ...
                     grid(below1, right1,  pil) + ...
                     grid(above1,  left1,  pil) + ...
                     grid(below1, right1,  pil) ;
        neighbors2 = grid(above1,  left1, top1) + ...
                     grid(below1, right1, top1) + ...
                     grid(above1,  left1, top1) + ...
                     grid(below1, right1, top1) + ...
                     grid(above1,  left1, bot1) + ...
                     grid(below1, right1, bot1) + ...
                     grid(above1,  left1, bot1) + ...
                     grid(below1, right1, bot1) ;
    elseif Lat == 't'
        neighbors1 = grid(above1,    col,  pil) + ...
                     grid(below1,    col,  pil) + ...
                     grid(   row,  left1,  pil) + ...
                     grid(   row, right1,  pil) + ...
                     grid(above1,  left1,  pil) + ...
                     grid(below1, right1,  pil) + ...
                     grid(   row,    col, top1) + ...
                     grid(above1,    col, top1) + ...
                     grid(   row, right1, top1) + ...
                     grid(   row,    col, bot1) + ...
                     grid(below1,    col, bot1) + ...
                     grid(   row,  left1, bot1) ; 
                     %up-layer: right+above, dw-layer: left+below
        %neighbors2 = grid(above1, right1) + ...
        %             grid(below1,  left1) + ...
        %             grid(above2,  left1) + ...
        %             grid(below2, right1) + ...
        %             grid(above1,  left2) + ...
        %             grid(below1, right2) ;
        %neighbors3 = grid(above2,    col) + ...
        %             grid(below2,    col) + ...
        %             grid(row,     left2) + ...
        %             grid(row,    right2) + ...
        %             grid(above2,  left2) + ...
        %             grid(below2, right2) ;
    elseif Lat == 'cab'
        neighbors1 = grid(above1,    col,  pil) + ...
                     grid(below1,    col,  pil) + ...
                     grid(   row,  left1,  pil) + ...
                     grid(   row, right1,  pil) + ...
                     grid(   row,    col, top1) + ...
                     grid(above1,    col, top1) + ...                  
                     grid(   row, right1, top1) + ...
                     grid(above1, right1, top1) + ...
                     grid(   row,    col, bot1) + ...
                     grid(above1,    col, bot1) + ...                  
                     grid(   row, right1, bot1) + ...
                     grid(above1, right1, bot1) ;
        %neighbors2 = grid(above1,  left1,  pil) + ...
        %             grid(below1, right1,  pil) + ...
        %             grid(above1,  left1,  pil) + ...
        %             grid(below1, right1,  pil) ;
        %neighbors2 = grid(above1,  left1, top1) + ...
        %             grid(below1, right1, top1) + ...
        %             grid(above1,  left1, top1) + ...
        %             grid(below1, right1, top1) + ...
        %             grid(above1,  left1, bot1) + ...
        %             grid(below1, right1, bot1) + ...
        %             grid(above1,  left1, bot1) + ...
        %             grid(below1, right1, bot1) ;
    end
    
    % Calculate the change in energy of trurning a spin to a random direction
    E  = - 2 * sum(gridT.*(J1 .* neighbors1 ));%+ J2 .* neighbors2 + J3 .* neighbors3)) ;
    dE =   2 * E;
    % Transition probabilities and performed on the chosen spin
    if dE < 0
        transition = -1;
    else
        transition = (rand() < exp(-dE/(kb*Ts(t)))) * -2 + 1;
    end
    grid(row, col, pil) = grid(row, col, pil) * transition;
    
    % Calculate average E per site
    if i > estep
        if Lat == 'c'
            shift1 = circshift(grid, [ 0  1  0]) + ...
                     circshift(grid, [ 0 -1  0]) + ...
                     circshift(grid, [ 1  0  0]) + ...
                     circshift(grid, [-1  0  0]) + ...
                     circshift(grid, [ 0  0  1]) + ...
                     circshift(grid, [ 0  0 -1]) ;
            shift2 = circshift(grid, [ 1  1  0]) + ...
                     circshift(grid, [ 1 -1  0]) + ...
                     circshift(grid, [-1  1  0]) + ...
                     circshift(grid, [-1 -1  0]) ;
            shift3 = circshift(grid, [ 1  1  1]) + ...
                     circshift(grid, [ 1 -1  1]) + ...
                     circshift(grid, [-1  1  1]) + ...
                     circshift(grid, [-1 -1  1]) + ...
                     circshift(grid, [ 1  1 -1]) + ...
                     circshift(grid, [ 1 -1 -1]) + ...
                     circshift(grid, [-1  1 -1]) + ...
                     circshift(grid, [-1 -1 -1]) ;
            E0 = -Sp^2*sum(sum(sum(sum(grid             .* ...
                                      (1/6 * J1 * shift1 + ...
                                       1/4 * J2 * shift2 + ...
                                       1/8 * J3 * shift3 )))));
        elseif Lat == 't'
            shift1 = circshift(grid, [ 0  1  0]) + ...
                     circshift(grid, [ 0 -1  0]) + ...
                     circshift(grid, [ 1  0  0]) + ...
                     circshift(grid, [-1  0  0]) + ...
                     circshift(grid, [ 1  1  0]) + ...
                     circshift(grid, [-1 -1  0]) + ...
                     circshift(grid, [ 0  0  1]) + ...
                     circshift(grid, [ 1  0  1]) + ...
                     circshift(grid, [ 0  1  1]) + ...
                     circshift(grid, [ 0  0 -1]) + ...
                     circshift(grid, [-1  0 -1]) + ...
                     circshift(grid, [ 0 -1 -1]) ;
            %shift2 = circshift(grid, [ 1  2]) + ...
            %         circshift(grid, [ 2  1]) + ...
            %         circshift(grid, [ 1 -1]) + ...
            %         circshift(grid, [-1  1]) + ...
            %         circshift(grid, [-2 -1]) + ...
            %         circshift(grid, [-1 -2]) ;
            %shift3 = circshift(grid, [ 2  0]) + ...
            %         circshift(grid, [ 2  2]) + ...
            %         circshift(grid, [ 0  2]) + ...
            %         circshift(grid, [-2  0]) + ...
            %         circshift(grid, [-2 -2]) + ...
            %         circshift(grid, [ 0 -2]) ;
            E0 = -Sp^2*sum(sum(sum(grid             .* ...
                                  (1/12 * J1 * shift1 ))));%+ ...
                                   %1/6 * J2 * shift2 + ...
                                   %1/6 * J3 * shift3 ))));
        elseif Lat == 'cab'
            shift1 = circshift(grid, [ 0  1  0]) + ...
                     circshift(grid, [ 0 -1  0]) + ...
                     circshift(grid, [ 1  0  0]) + ...
                     circshift(grid, [-1  0  0]) + ...
                     circshift(grid, [ 0  0  1]) + ...
                     circshift(grid, [ 1  0  1]) + ...
                     circshift(grid, [ 0  1  1]) + ...
                     circshift(grid, [ 1  1  1]) + ...
                     circshift(grid, [ 0  0 -1]) + ...
                     circshift(grid, [ 1  0 -1]) + ...
                     circshift(grid, [ 0  1 -1]) + ...
                     circshift(grid, [ 1  1 -1]) ;
            %shift2 = circshift(grid, [ 1  1  0]) + ...
            %         circshift(grid, [ 1 -1  0]) + ...
            %         circshift(grid, [-1  1  0]) + ...
            %         circshift(grid, [-1 -1  0]) ;
            %shift3 = circshift(grid, [ 1  1  1]) + ...
            %         circshift(grid, [ 1 -1  1]) + ...
            %         circshift(grid, [-1  1  1]) + ...
            %         circshift(grid, [-1 -1  1]) + ...
            %         circshift(grid, [ 1  1 -1]) + ...
            %         circshift(grid, [ 1 -1 -1]) + ...
            %         circshift(grid, [-1  1 -1]) + ...
            %         circshift(grid, [-1 -1 -1]) ;
            E0 = -Sp^2*sum(sum(sum(sum(grid             .* ...
                                      (1/12 * J1 * shift1 )))));%+ ...
                                       %1/4 * J2 * shift2 + ...
                                       %1/8 * J3 * shift3 )))));
        end
        % calculate average M per site
        E1 =  E1 + E0          ;
        E2 =  E2 + E0^2        ;
        E0 =  0.0              ;
        
        M0 =  2*sum(sum(sum(grid))) ;
        M1 =  M1 + M0          ;
        M2 =  M2 + M0^2        ;
        M0 =  0.0              ;
    end
    end
    % Sum up our variables of interest    
    Ms(t) = abs(M1)/(mstep*L^3); 
    Mx(t) = (M2/mstep-(M1/mstep)^2)*const;
    Cs(t) = (E2/mstep-(E1/mstep)^2)*const/Ts(t);
    Es(t) =  E1/(mstep*L^3);
    E1 = 0.0; E2 = 0.0;
    M1 = 0.0; M2 = 0.0;
end
close(bar)